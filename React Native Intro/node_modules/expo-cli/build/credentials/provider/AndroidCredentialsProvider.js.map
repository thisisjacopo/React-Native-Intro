{"version":3,"sources":["../../../src/credentials/provider/AndroidCredentialsProvider.ts"],"names":["AndroidCredentialsProvider","constructor","projectDir","options","Context","projectFullName","projectName","accountName","initAsync","ctx","init","hasRemoteAsync","keystore","android","fetchKeystore","isValidKeystore","hasLocalAsync","credentialsJson","fileExistsAsync","credentials","readAndroidAsync","err","isLocalSyncedAsync","remote","local","Promise","all","r","l","keystorePassword","keyAlias","keyPassword","_","getCredentialsAsync","src","CredentialsSource","LOCAL","getLocalAsync","REMOTE","getRemoteAsync","SetupAndroidKeystore","allowMissingKeystore","Error"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAYe,MAAMA,0BAAN,CAAgE;AAI7EC,EAAAA,WAAW,CAASC,UAAT,EAAqCC,OAArC,EAAuD;AAAA,SAA9CD,UAA8C,GAA9CA,UAA8C;AAAA,SAAlBC,OAAkB,GAAlBA,OAAkB;;AAAA,sCAHvC,SAGuC;;AAAA,iCAF3C,KAAIC,kBAAJ,GAE2C;AAAE;;AAEpE,MAAYC,eAAZ,GAAsC;AACpC,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA+B,KAAKJ,OAA1C;AACA,WAAQ,IAAGI,WAAY,IAAGD,WAAY,EAAtC;AACD;;AAED,QAAaE,SAAb,GAAyB;AACvB,UAAM,KAAKC,GAAL,CAASC,IAAT,CAAc,KAAKR,UAAnB,CAAN;AACD;;AAED,QAAaS,cAAb,GAAgD;AAC9C,UAAMC,QAAQ,GAAG,MAAM,KAAKH,GAAL,CAASI,OAAT,CAAiBC,aAAjB,CAA+B,KAAKT,eAApC,CAAvB;AACA,WAAO,KAAKU,eAAL,CAAqBH,QAArB,CAAP;AACD;;AAED,QAAaI,aAAb,GAA+C;AAC7C,QAAI,EAAE,MAAMC,yBAAgBC,eAAhB,CAAgC,KAAKhB,UAArC,CAAR,CAAJ,EAA+D;AAC7D,aAAO,KAAP;AACD;;AACD,QAAI;AACF,YAAMiB,WAAW,GAAG,MAAMF,yBAAgBG,gBAAhB,CAAiC,KAAKlB,UAAtC,CAA1B;AACA,aAAO,KAAKa,eAAL,CAAqBI,WAAW,CAACP,QAAjC,CAAP;AACD,KAHD,CAGE,OAAOS,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF;;AAED,QAAaC,kBAAb,GAAoD;AAClD,QAAI;AACF,YAAM,CAACC,MAAD,EAASC,KAAT,IAAkB,MAAMC,OAAO,CAACC,GAAR,CAAY,CACxC,KAAKjB,GAAL,CAASI,OAAT,CAAiBC,aAAjB,CAA+B,KAAKT,eAApC,CADwC,EAExC,MAAMY,yBAAgBG,gBAAhB,CAAiC,KAAKlB,UAAtC,CAFkC,CAAZ,CAA9B;AAIA,YAAMyB,CAAC,GAAGJ,MAAV;AACA,YAAMK,CAAC,GAAGJ,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEZ,QAAjB;AACA,aAAO,CAAC,EACNe,CAAC,CAACf,QAAF,KAAegB,CAAC,CAAChB,QAAjB,IACAe,CAAC,CAACE,gBAAF,KAAuBD,CAAC,CAACC,gBADzB,IAEAF,CAAC,CAACG,QAAF,KAAeF,CAAC,CAACE,QAFjB,IAGAH,CAAC,CAACI,WAAF,KAAkBH,CAAC,CAACG,WAHpB,IAIA,KAAKhB,eAAL,CAAqBY,CAArB,CALM,CAAR;AAOA,aAAO,IAAP;AACD,KAfD,CAeE,OAAOK,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF;;AAED,QAAaC,mBAAb,CACEC,GADF,EAE+B;AAC7B,YAAQA,GAAR;AACE,WAAKC,6BAAkBC,KAAvB;AACE,eAAO,MAAM,KAAKC,aAAL,EAAb;;AACF,WAAKF,6BAAkBG,MAAvB;AACE,eAAO,MAAM,KAAKC,cAAL,EAAb;AAJJ;AAMD;;AAED,QAAcA,cAAd,GAA4D;AAC1D,UAAM,oCACJ,KAAK9B,GADD,EAEJ,KAAI+B,4CAAJ,EAAyB,KAAKnC,eAA9B,EAA+C;AAC7CoC,MAAAA,oBAAoB,EAAE;AADuB,KAA/C,CAFI,CAAN;AAMA,UAAM7B,QAAQ,GAAG,MAAM,KAAKH,GAAL,CAASI,OAAT,CAAiBC,aAAjB,CAA+B,KAAKT,eAApC,CAAvB;;AACA,QAAI,CAACO,QAAD,IAAa,CAAC,KAAKG,eAAL,CAAqBH,QAArB,CAAlB,EAAkD;AAChD,YAAM,IAAI8B,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,WAAO;AAAE9B,MAAAA;AAAF,KAAP;AACD;;AAED,QAAcyB,aAAd,GAA2D;AACzD,UAAMlB,WAAW,GAAG,MAAMF,yBAAgBG,gBAAhB,CAAiC,KAAKlB,UAAtC,CAA1B;;AACA,QAAI,CAAC,KAAKa,eAAL,CAAqBI,WAAW,CAACP,QAAjC,CAAL,EAAiD;AAC/C,YAAM,IAAI8B,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,WAAOvB,WAAP;AACD;;AAEOJ,EAAAA,eAAR,CAAwBH,QAAxB,EAAoD;AAClD,WAAO,CAAC,EACNA,QAAQ,IACRA,QAAQ,CAACA,QADT,IAEAA,QAAQ,CAACiB,gBAFT,IAGAjB,QAAQ,CAACmB,WAHT,IAIAnB,QAAQ,CAACkB,QALH,CAAR;AAOD;;AA9F4E","sourcesContent":["import { SetupAndroidKeystore } from '../views/SetupAndroidKeystore';\nimport { Keystore } from '../credentials';\nimport { runCredentialsManager } from '../route';\nimport { Context } from '../context';\nimport { credentialsJson } from '../local';\nimport { CredentialsProvider } from './provider';\nimport { CredentialsSource } from '../../easJson';\nimport log from '../../log';\n\nexport interface AndroidCredentials {\n  keystore: Keystore;\n}\n\ninterface Options {\n  projectName: string;\n  accountName: string;\n}\n\nexport default class AndroidCredentialsProvider implements CredentialsProvider {\n  public readonly platform = 'android';\n  private readonly ctx = new Context();\n\n  constructor(private projectDir: string, private options: Options) {}\n\n  private get projectFullName(): string {\n    const { projectName, accountName } = this.options;\n    return `@${accountName}/${projectName}`;\n  }\n\n  public async initAsync() {\n    await this.ctx.init(this.projectDir);\n  }\n\n  public async hasRemoteAsync(): Promise<boolean> {\n    const keystore = await this.ctx.android.fetchKeystore(this.projectFullName);\n    return this.isValidKeystore(keystore);\n  }\n\n  public async hasLocalAsync(): Promise<boolean> {\n    if (!(await credentialsJson.fileExistsAsync(this.projectDir))) {\n      return false;\n    }\n    try {\n      const credentials = await credentialsJson.readAndroidAsync(this.projectDir);\n      return this.isValidKeystore(credentials.keystore);\n    } catch (err) {\n      return false;\n    }\n  }\n\n  public async isLocalSyncedAsync(): Promise<boolean> {\n    try {\n      const [remote, local] = await Promise.all([\n        this.ctx.android.fetchKeystore(this.projectFullName),\n        await credentialsJson.readAndroidAsync(this.projectDir),\n      ]);\n      const r = remote!;\n      const l = local?.keystore!;\n      return !!(\n        r.keystore === l.keystore &&\n        r.keystorePassword === l.keystorePassword &&\n        r.keyAlias === l.keyAlias &&\n        r.keyPassword === l.keyPassword &&\n        this.isValidKeystore(r)\n      );\n      return true;\n    } catch (_) {\n      return false;\n    }\n  }\n\n  public async getCredentialsAsync(\n    src: CredentialsSource.LOCAL | CredentialsSource.REMOTE\n  ): Promise<AndroidCredentials> {\n    switch (src) {\n      case CredentialsSource.LOCAL:\n        return await this.getLocalAsync();\n      case CredentialsSource.REMOTE:\n        return await this.getRemoteAsync();\n    }\n  }\n\n  private async getRemoteAsync(): Promise<AndroidCredentials> {\n    await runCredentialsManager(\n      this.ctx,\n      new SetupAndroidKeystore(this.projectFullName, {\n        allowMissingKeystore: false,\n      })\n    );\n    const keystore = await this.ctx.android.fetchKeystore(this.projectFullName);\n    if (!keystore || !this.isValidKeystore(keystore)) {\n      throw new Error('Unable to set up credentials');\n    }\n    return { keystore };\n  }\n\n  private async getLocalAsync(): Promise<AndroidCredentials> {\n    const credentials = await credentialsJson.readAndroidAsync(this.projectDir);\n    if (!this.isValidKeystore(credentials.keystore)) {\n      throw new Error('Invalid keystore in credentials.json');\n    }\n    return credentials;\n  }\n\n  private isValidKeystore(keystore?: Keystore | null) {\n    return !!(\n      keystore &&\n      keystore.keystore &&\n      keystore.keystorePassword &&\n      keystore.keyPassword &&\n      keystore.keyAlias\n    );\n  }\n}\n"],"file":"AndroidCredentialsProvider.js"}