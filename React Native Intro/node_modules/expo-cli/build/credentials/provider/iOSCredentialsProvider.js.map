{"version":3,"sources":["../../../src/credentials/provider/iOSCredentialsProvider.ts"],"names":["iOSCredentialsProvider","constructor","projectDir","options","Context","projectFullName","projectName","accountName","initAsync","ctx","init","hasRemoteAsync","distCert","ios","getDistCert","bundleIdentifier","provisioningProfile","getProvisioningProfile","hasLocalAsync","credentialsJson","fileExistsAsync","readIosAsync","_","isLocalSyncedAsync","remote","local","Promise","all","getRemoteAsync","getLocalAsync","r","l","distributionCertificate","certP12","certPassword","getCredentialsAsync","src","CredentialsSource","LOCAL","REMOTE","SetupIosBuildCredentials","experienceName","Error"],"mappings":"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","sourcesContent":["import { SetupIosBuildCredentials } from '../views/SetupIosBuildCredentials';\nimport { runCredentialsManager } from '../route';\nimport { Context } from '../context';\nimport { credentialsJson } from '../local';\nimport { CredentialsProvider } from './provider';\nimport { CredentialsSource } from '../../easJson';\n\nexport interface iOSCredentials {\n  provisioningProfile: string;\n  distributionCertificate: {\n    certP12: string;\n    certPassword: string;\n  };\n}\n\ninterface Options {\n  projectName: string;\n  accountName: string;\n  bundleIdentifier: string;\n}\n\nexport default class iOSCredentialsProvider implements CredentialsProvider {\n  public readonly platform = 'ios';\n  private readonly ctx = new Context();\n  private credentials?: iOSCredentials;\n\n  constructor(private projectDir: string, private options: Options) {}\n\n  get projectFullName(): string {\n    const { projectName, accountName } = this.options;\n    return `@${accountName}/${projectName}`;\n  }\n\n  public async initAsync() {\n    await this.ctx.init(this.projectDir);\n  }\n\n  public async hasRemoteAsync(): Promise<boolean> {\n    const distCert = await this.ctx.ios.getDistCert(\n      this.projectFullName,\n      this.options.bundleIdentifier\n    );\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(\n      this.projectFullName,\n      this.options.bundleIdentifier\n    );\n    return !!(distCert && provisioningProfile);\n  }\n\n  public async hasLocalAsync(): Promise<boolean> {\n    if (!(await credentialsJson.fileExistsAsync(this.projectDir))) {\n      return false;\n    }\n    try {\n      await credentialsJson.readIosAsync(this.projectDir);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  }\n\n  public async isLocalSyncedAsync(): Promise<boolean> {\n    try {\n      const [remote, local] = await Promise.all([this.getRemoteAsync(), this.getLocalAsync()]);\n      const r = remote;\n      const l = local;\n      return !!(\n        r.provisioningProfile === l.provisioningProfile &&\n        r.distributionCertificate.certP12 === l.distributionCertificate.certP12 &&\n        r.distributionCertificate.certPassword === l.distributionCertificate.certPassword\n      );\n      return true;\n    } catch (_) {\n      return false;\n    }\n  }\n\n  public async getCredentialsAsync(\n    src: CredentialsSource.LOCAL | CredentialsSource.REMOTE\n  ): Promise<iOSCredentials> {\n    switch (src) {\n      case CredentialsSource.LOCAL:\n        return await this.getLocalAsync();\n      case CredentialsSource.REMOTE:\n        return await this.getRemoteAsync();\n    }\n  }\n\n  private async getLocalAsync(): Promise<iOSCredentials> {\n    return await credentialsJson.readIosAsync(this.projectDir);\n  }\n  private async getRemoteAsync(): Promise<iOSCredentials> {\n    await runCredentialsManager(\n      this.ctx,\n      new SetupIosBuildCredentials({\n        experienceName: this.projectFullName,\n        bundleIdentifier: this.options.bundleIdentifier,\n      })\n    );\n    const distCert = await this.ctx.ios.getDistCert(\n      this.projectFullName,\n      this.options.bundleIdentifier\n    );\n    if (!distCert) {\n      throw new Error('Missing distribution certificate'); // shouldn't happen\n    }\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(\n      this.projectFullName,\n      this.options.bundleIdentifier\n    );\n    if (!provisioningProfile) {\n      throw new Error('Missing provisioning profile'); // shouldn't happen\n    }\n    return {\n      provisioningProfile: provisioningProfile.provisioningProfile,\n      distributionCertificate: {\n        certP12: distCert.certP12,\n        certPassword: distCert.certPassword,\n      },\n    };\n  }\n}\n"],"file":"iOSCredentialsProvider.js"}