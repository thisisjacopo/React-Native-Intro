{"version":3,"sources":["../../../src/credentials/views/SetupIosBuildCredentials.ts"],"names":["SetupIosBuildCredentials","constructor","options","open","ctx","experienceName","bundleIdentifier","nonInteractive","bestEffortAppleCtx","hasAppleCtx","appleApi","ensureAppExists","appleCtx","enablePushNotifications","SetupIosDist","error","log","distCert","ios","getDistCert","CommandError","SetupIosProvisioningProfile","appleId","ensureAppleCtx","confirm","type","name","message","chalk","green"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAYO,MAAMA,wBAAN,CAAgD;AACrDC,EAAAA,WAAW,CAASC,OAAT,EAAmD;AAAA,SAA1CA,OAA0C,GAA1CA,OAA0C;AAAE;;AAEhE,QAAMC,IAAN,CAAWC,GAAX,EAAgD;AAC9C,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA,gBAAlB;AAAoCC,MAAAA;AAApC,QAAuD,KAAKL,OAAlE;AACA,UAAM,KAAKM,kBAAL,CAAwBJ,GAAxB,CAAN;;AAEA,QAAIA,GAAG,CAACK,WAAJ,EAAJ,EAAuB;AACrB,YAAMC,QAAQ,GAACC,eAAT,CACJP,GAAG,CAACQ,QADA,EAEJ;AAAEP,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB,OAFI,EAGJ;AAAEO,QAAAA,uBAAuB,EAAE;AAA3B,OAHI,CAAN;AAKD;;AACD,QAAI;AACF,YAAM,oCACJT,GADI,EAEJ,KAAIU,4BAAJ,EAAiB;AAAET,QAAAA,cAAF;AAAkBC,QAAAA,gBAAlB;AAAoCC,QAAAA;AAApC,OAAjB,CAFI,CAAN;AAID,KALD,CAKE,OAAOQ,KAAP,EAAc;AACdC,qBAAID,KAAJ,CAAU,2CAAV;;AACA,YAAMA,KAAN;AACD;;AAED,UAAME,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAJ,CAAQC,WAAR,CAAoBd,cAApB,EAAoCC,gBAApC,CAAvB;;AACA,QAAI,CAACW,QAAL,EAAe;AACb,YAAM,KAAIG,uBAAJ,EACJ,0BADI,EAEH,+DAFG,CAAN;AAID;;AAED,QAAI;AACF,YAAM,oCACJhB,GADI,EAEJ,KAAIiB,0DAAJ,EAAgC;AAC9BhB,QAAAA,cAD8B;AAE9BC,QAAAA,gBAF8B;AAG9BC,QAAAA,cAH8B;AAI9BU,QAAAA;AAJ8B,OAAhC,CAFI,CAAN;AASD,KAVD,CAUE,OAAOF,KAAP,EAAc;AACdC,qBAAID,KAAJ,CAAU,uCAAV;;AACA,YAAMA,KAAN;AACD;;AAED,WAAO,IAAP;AACD,GAhDoD,CAkDrD;AACA;;;AACA,QAAMP,kBAAN,CAAyBJ,GAAzB,EAAsD;AACpD,QAAIA,GAAG,CAACK,WAAJ,EAAJ,EAAuB;AACrB;AACA;AACD;;AACD,QAAI,KAAKP,OAAL,CAAaoB,OAAjB,EAA0B;AACxB;AACA,aAAO,MAAMlB,GAAG,CAACmB,cAAJ,CAAmB,KAAKrB,OAAxB,CAAb;AACD;;AAED,UAAMK,cAAc,GAAG,KAAKL,OAAL,CAAaK,cAApC;;AACA,QAAIA,cAAJ,EAAoB;AAClB;AACD;;AAED,UAAM;AAAEiB,MAAAA;AAAF,QAAc,MAAM,wBAAO,CAC/B;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,OAAO,EAAG;AAHZ,KAD+B,CAAP,CAA1B;;AAOA,QAAIH,OAAJ,EAAa;AACX,aAAO,MAAMpB,GAAG,CAACmB,cAAJ,CAAmB,KAAKrB,OAAxB,CAAb;AACD,KAFD,MAEO;AACL,0BACE0B,iBAAMC,KAAN,CACE,sKADF,CADF;AAKD;AACF;;AAnFoD","sourcesContent":["import chalk from 'chalk';\n\nimport prompt from '../../prompts';\nimport log from '../../log';\nimport CommandError, { ErrorCodes } from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport { Context, IView } from '../context';\nimport { runCredentialsManager } from '../route';\nimport { SetupIosDist } from './SetupIosDist';\nimport { SetupIosProvisioningProfile } from './SetupIosProvisioningProfile';\n\ninterface CliOptions {\n  nonInteractive?: boolean;\n  appleId?: string;\n}\n\ninterface SetupIosBuildCredentialsOptions extends CliOptions {\n  experienceName: string;\n  bundleIdentifier: string;\n}\n\nexport class SetupIosBuildCredentials implements IView {\n  constructor(private options: SetupIosBuildCredentialsOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const { experienceName, bundleIdentifier, nonInteractive } = this.options;\n    await this.bestEffortAppleCtx(ctx);\n\n    if (ctx.hasAppleCtx()) {\n      await appleApi.ensureAppExists(\n        ctx.appleCtx,\n        { experienceName, bundleIdentifier },\n        { enablePushNotifications: true }\n      );\n    }\n    try {\n      await runCredentialsManager(\n        ctx,\n        new SetupIosDist({ experienceName, bundleIdentifier, nonInteractive })\n      );\n    } catch (error) {\n      log.error('Failed to set up Distribution Certificate');\n      throw error;\n    }\n\n    const distCert = await ctx.ios.getDistCert(experienceName, bundleIdentifier);\n    if (!distCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    try {\n      await runCredentialsManager(\n        ctx,\n        new SetupIosProvisioningProfile({\n          experienceName,\n          bundleIdentifier,\n          nonInteractive,\n          distCert,\n        })\n      );\n    } catch (error) {\n      log.error('Failed to set up Provisioning Profile');\n      throw error;\n    }\n\n    return null;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n    if (this.options.appleId) {\n      // skip prompts and auto authenticate if flags are passed\n      return await ctx.ensureAppleCtx(this.options);\n    }\n\n    const nonInteractive = this.options.nonInteractive;\n    if (nonInteractive) {\n      return;\n    }\n\n    const { confirm } = await prompt([\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n      },\n    ]);\n    if (confirm) {\n      return await ctx.ensureAppleCtx(this.options);\n    } else {\n      log(\n        chalk.green(\n          'No problem! ðŸ‘Œ \\nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n}\n"],"file":"SetupIosBuildCredentials.js"}