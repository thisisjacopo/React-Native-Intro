{"version":3,"sources":["../../../src/credentials/local/credentialsJson.ts"],"names":["CredentialsJsonSchema","Joi","object","android","keystore","keystorePath","string","required","keystorePassword","keyAlias","keyPassword","ios","provisioningProfilePath","distributionCertificate","path","password","fileExistsAsync","projectDir","fs","pathExists","join","readAndroidAsync","credentialsJson","readAsync","Error","keystoreInfo","readFile","readIosAsync","provisioningProfile","certP12","certPassword","credentialsJsonFilePath","credentialsJSONRaw","credentialsJSONContents","JSON","parse","err","value","error","validate","stripUnknown","convert","abortEarly","toString"],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport Joi from '@hapi/joi';\nimport fs from 'fs-extra';\n\nimport { Keystore } from '../credentials';\n\ninterface CredentialsJson {\n  android?: {\n    keystore: {\n      keystorePath: string;\n      keystorePassword: string;\n      keyAlias: string;\n      keyPassword: string;\n    };\n  };\n  ios?: {\n    provisioningProfilePath: string;\n    distributionCertificate: {\n      path: string;\n      password: string;\n    };\n  };\n}\n\nconst CredentialsJsonSchema = Joi.object({\n  android: Joi.object({\n    keystore: Joi.object({\n      keystorePath: Joi.string().required(),\n      keystorePassword: Joi.string().required(),\n      keyAlias: Joi.string().required(),\n      keyPassword: Joi.string().required(),\n    }),\n  }),\n  ios: Joi.object({\n    provisioningProfilePath: Joi.string().required(),\n    distributionCertificate: Joi.object({\n      path: Joi.string().required(),\n      password: Joi.string().required(),\n    }).required(),\n  }),\n});\n\ninterface AndroidCredentials {\n  keystore: Keystore;\n}\n\ninterface iOSCredentials {\n  provisioningProfile: string;\n  distributionCertificate: {\n    certP12: string;\n    certPassword: string;\n  };\n}\n\nasync function fileExistsAsync(projectDir: string): Promise<boolean> {\n  return await fs.pathExists(path.join(projectDir, 'credentials.json'));\n}\n\nasync function readAndroidAsync(projectDir: string): Promise<AndroidCredentials> {\n  const credentialsJson = await readAsync(projectDir);\n  if (!credentialsJson.android) {\n    throw new Error('Android credentials are missing from credentials.json'); // TODO: add fyi\n  }\n  const keystoreInfo = credentialsJson.android.keystore;\n  return {\n    keystore: {\n      keystore: await fs.readFile(keystoreInfo.keystorePath, 'base64'),\n      keystorePassword: keystoreInfo.keystorePassword,\n      keyAlias: keystoreInfo.keyAlias,\n      keyPassword: keystoreInfo.keyPassword,\n    },\n  };\n}\n\nasync function readIosAsync(projectDir: string): Promise<iOSCredentials> {\n  const credentialsJson = await readAsync(projectDir);\n  if (!credentialsJson.ios) {\n    throw new Error('iOS credentials are missing from credentials.json'); // TODO: add fyi\n  }\n  return {\n    provisioningProfile: await fs.readFile(credentialsJson.ios.provisioningProfilePath, 'base64'),\n    distributionCertificate: {\n      certP12: await fs.readFile(credentialsJson.ios.distributionCertificate.path, 'base64'),\n      certPassword: credentialsJson.ios.distributionCertificate.password,\n    },\n  };\n}\n\nasync function readAsync(projectDir: string): Promise<CredentialsJson> {\n  const credentialsJsonFilePath = path.join(projectDir, 'credentials.json');\n  let credentialsJSONRaw;\n  try {\n    const credentialsJSONContents = await fs.readFile(credentialsJsonFilePath, 'utf8');\n    credentialsJSONRaw = JSON.parse(credentialsJSONContents);\n  } catch (err) {\n    throw new Error(\n      `credentials.json must exist in the project root directory and consist a valid JSON`\n    );\n  }\n\n  const { value: credentialsJson, error } = CredentialsJsonSchema.validate(credentialsJSONRaw, {\n    stripUnknown: true,\n    convert: true,\n    abortEarly: false,\n  });\n  if (error) {\n    throw new Error(`credentials.json is not valid [${error.toString()}]`);\n  }\n\n  return credentialsJson;\n}\n\nexport default { readAndroidAsync, readIosAsync, fileExistsAsync };\n"],"file":"credentialsJson.js"}