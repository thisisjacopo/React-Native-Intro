{"version":3,"sources":["../../../src/commands/build-native/credentials.ts"],"names":["platformMapName","ios","android","ensureCredentialsAutoAsync","provider","workflow","platform","Workflow","Managed","hasLocalAsync","CredentialsSource","LOCAL","REMOTE","Generic","hasLocal","hasRemote","hasRemoteAsync","isLocalSyncedAsync","select","type","name","message","choices","title","value","log","warn","confirm","Error","ensureCredentialsAsync","src","AUTO"],"mappings":";;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,eAAe,GAAG;AACtBC,EAAAA,GAAG,EAAE,KADiB;AAEtBC,EAAAA,OAAO,EAAE;AAFa,CAAxB;;AAKA,eAAeC,0BAAf,CACEC,QADF,EAEEC,QAFF,EAG+D;AAC7D,QAAMC,QAAQ,GAAGN,eAAe,CAACI,QAAQ,CAACE,QAAV,CAAhC;;AACA,UAAQD,QAAR;AACE,SAAKE,oBAASC,OAAd;AACE,UAAI,MAAMJ,QAAQ,CAACK,aAAT,EAAV,EAAoC;AAClC,eAAOC,6BAAkBC,KAAzB;AACD,OAFD,MAEO;AACL,eAAOD,6BAAkBE,MAAzB;AACD;;AACH,SAAKL,oBAASM,OAAd;AAAuB;AACrB,cAAMC,QAAQ,GAAG,MAAMV,QAAQ,CAACK,aAAT,EAAvB;AACA,cAAMM,SAAS,GAAG,MAAMX,QAAQ,CAACY,cAAT,EAAxB;;AACA,YAAID,SAAS,IAAID,QAAjB,EAA2B;AACzB,cAAI,EAAE,MAAMV,QAAQ,CAACa,kBAAT,EAAR,CAAJ,EAA4C;AAC1C,gCACG,+CAA8CX,QAAS,kDAD1D;AAGA,kBAAM;AAAEY,cAAAA;AAAF,gBAAa,MAAM,wBAAQ;AAC/BC,cAAAA,IAAI,EAAE,QADyB;AAE/BC,cAAAA,IAAI,EAAE,QAFyB;AAG/BC,cAAAA,OAAO,EAAE,mDAHsB;AAI/BC,cAAAA,OAAO,EAAE,CACP;AAAEC,gBAAAA,KAAK,EAAE,wBAAT;AAAmCC,gBAAAA,KAAK,EAAEd,6BAAkBC;AAA5D,eADO,EAEP;AAAEY,gBAAAA,KAAK,EAAE,qCAAT;AAAgDC,gBAAAA,KAAK,EAAEd,6BAAkBE;AAAzE,eAFO;AAJsB,aAAR,CAAzB;AASA,mBAAOM,MAAP;AACD,WAdD,MAcO;AACL,mBAAOR,6BAAkBC,KAAzB;AACD;AACF,SAlBD,MAkBO,IAAIG,QAAJ,EAAc;AACnB,iBAAOJ,6BAAkBC,KAAzB;AACD,SAFM,MAEA,IAAII,SAAJ,EAAe;AACpB,iBAAOL,6BAAkBE,MAAzB;AACD,SAFM,MAEA;AACLa,yBAAIC,IAAJ,CACG,6FAA4FpB,QAAS,EADxG;;AAGA,gBAAM;AAAEqB,YAAAA;AAAF,cAAc,MAAM,wBAAQ;AAChCR,YAAAA,IAAI,EAAE,SAD0B;AAEhCC,YAAAA,IAAI,EAAE,SAF0B;AAGhCC,YAAAA,OAAO,EAAE;AAHuB,WAAR,CAA1B;;AAKA,cAAIM,OAAJ,EAAa;AACX,mBAAOjB,6BAAkBE,MAAzB;AACD,WAFD,MAEO;AACL,kBAAM,IAAIgB,KAAJ,CAAW,8DAA6DtB,QAAS,EAAjF,CAAN;AACD;AACF;AACF;AA/CH;AAiDD;;AAEM,eAAeuB,sBAAf,CACLzB,QADK,EAELC,QAFK,EAGLyB,GAHK,EAIwD;AAC7D,UAAQA,GAAR;AACE,SAAKpB,6BAAkBC,KAAvB;AACE,aAAOD,6BAAkBC,KAAzB;;AACF,SAAKD,6BAAkBE,MAAvB;AACE,aAAOF,6BAAkBE,MAAzB;;AACF,SAAKF,6BAAkBqB,IAAvB;AACE,aAAO,MAAM5B,0BAA0B,CAACC,QAAD,EAAWC,QAAX,CAAvC;AANJ;AAQD","sourcesContent":["import { Keystore } from '../../credentials/credentials';\nimport { CredentialsProvider } from '../../credentials/provider';\nimport { BuilderContext } from './build';\nimport { CredentialsSource, Workflow } from '../../easJson';\nimport prompts from '../../prompts';\nimport log from '../../log';\n\nconst platformMapName = {\n  ios: 'iOS',\n  android: 'Android',\n};\n\nasync function ensureCredentialsAutoAsync(\n  provider: CredentialsProvider,\n  workflow: Workflow\n): Promise<CredentialsSource.LOCAL | CredentialsSource.REMOTE> {\n  const platform = platformMapName[provider.platform];\n  switch (workflow) {\n    case Workflow.Managed:\n      if (await provider.hasLocalAsync()) {\n        return CredentialsSource.LOCAL;\n      } else {\n        return CredentialsSource.REMOTE;\n      }\n    case Workflow.Generic: {\n      const hasLocal = await provider.hasLocalAsync();\n      const hasRemote = await provider.hasRemoteAsync();\n      if (hasRemote && hasLocal) {\n        if (!(await provider.isLocalSyncedAsync())) {\n          log(\n            `Contents of your local credentials.json for ${platform} are not the same as credentials on Expo servers`\n          );\n          const { select } = await prompts({\n            type: 'select',\n            name: 'select',\n            message: 'Which credentials you want to use for this build?',\n            choices: [\n              { title: 'Local credentials.json', value: CredentialsSource.LOCAL },\n              { title: 'Credentials stored on Expo servers.', value: CredentialsSource.REMOTE },\n            ],\n          });\n          return select;\n        } else {\n          return CredentialsSource.LOCAL;\n        }\n      } else if (hasLocal) {\n        return CredentialsSource.LOCAL;\n      } else if (hasRemote) {\n        return CredentialsSource.REMOTE;\n      } else {\n        log.warn(\n          `Credentials for this app are not configured and there is no entry in credentials.json for ${platform}`\n        );\n        const { confirm } = await prompts({\n          type: 'confirm',\n          name: 'confirm',\n          message: 'Do you want to generete new credentials?',\n        });\n        if (confirm) {\n          return CredentialsSource.REMOTE;\n        } else {\n          throw new Error(`Aborting build process, credentials are not configured for ${platform}`);\n        }\n      }\n    }\n  }\n}\n\nexport async function ensureCredentialsAsync(\n  provider: CredentialsProvider,\n  workflow: Workflow,\n  src: CredentialsSource\n): Promise<CredentialsSource.LOCAL | CredentialsSource.REMOTE> {\n  switch (src) {\n    case CredentialsSource.LOCAL:\n      return CredentialsSource.LOCAL;\n    case CredentialsSource.REMOTE:\n      return CredentialsSource.REMOTE;\n    case CredentialsSource.AUTO:\n      return await ensureCredentialsAutoAsync(provider, workflow);\n  }\n}\n"],"file":"credentials.js"}