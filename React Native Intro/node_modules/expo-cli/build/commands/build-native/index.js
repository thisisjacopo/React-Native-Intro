"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildAction = buildAction;
exports.default = _default;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _easJson() {
  const data = require("../../easJson");

  _easJson = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _projects() {
  const data = require("../../projects");

  _projects = function () {
    return data;
  };

  return data;
}

function _build() {
  const data = require("./build");

  _build = function () {
    return data;
  };

  return data;
}

function _AndroidBuilder() {
  const data = _interopRequireDefault(require("./AndroidBuilder"));

  _AndroidBuilder = function () {
    return data;
  };

  return data;
}

function _iOSBuilder() {
  const data = _interopRequireDefault(require("./iOSBuilder"));

  _iOSBuilder = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function startBuildsAsync(ctx, projectId, platform) {
  const client = _xdl().ApiV2.clientForUser(ctx.user);

  let scheduledBuilds = [];

  if (['android', 'all'].includes(platform)) {
    const builder = new (_AndroidBuilder().default)(ctx);
    const buildId = await (0, _build().startBuildAsync)(client, builder, projectId);
    scheduledBuilds.push({
      platform: 'android',
      buildId
    });
  }

  if (['ios', 'all'].includes(platform)) {
    const builder = new (_iOSBuilder().default)(ctx);
    const buildId = await (0, _build().startBuildAsync)(client, builder, projectId);
    scheduledBuilds.push({
      platform: 'ios',
      buildId
    });
  }

  return scheduledBuilds;
}

async function buildAction(projectDir, options) {
  const {
    platform,
    profile
  } = options;

  if (!platform || !['android', 'ios', 'all'].includes(platform)) {
    throw new Error(`-p/--platform is required, valid platforms: ${_log().default.chalk.bold('android')}, ${_log().default.chalk.bold('ios')}, ${_log().default.chalk.bold('all')}`);
  }

  const easConfig = await new (_easJson().EasJsonReader)(projectDir, platform).readAsync(profile);
  const ctx = await (0, _build().createBuilderContextAsync)(projectDir, easConfig);
  const projectId = await (0, _projects().ensureProjectExistsAsync)(ctx.user, {
    accountName: ctx.accountName,
    projectName: ctx.projectName
  });
  const scheduledBuilds = await startBuildsAsync(ctx, projectId, options.platform);
  (0, _utils().printLogsUrls)(ctx.accountName, scheduledBuilds);

  if (options.wait) {
    const buildInfo = await (0, _build().waitForBuildEndAsync)(ctx, projectId, scheduledBuilds.map(i => i.buildId));
    (0, _utils().printBuildResults)(buildInfo);
  }
}

async function statusAction(projectDir) {
  throw new Error('not implemented yet');
}

function _default(program) {
  const buildCmd = program.command('build [project-dir]').description('Build an app binary for your project, signed and ready for submission to the Google Play Store.').allowUnknownOption().option('-p --platform <platform>').option('--skip-credentials-check', 'Skip checking credentials', false).option('--no-wait', 'Exit immediately after scheduling build', false).option('--profile <profile>', 'Build profile', 'release').asyncActionProjectDir(buildAction, {
    checkConfig: true
  });
  program.command('build:status').description(`Get the status of the latest builds for your project.`).asyncActionProjectDir(statusAction, {
    checkConfig: true
  });
}
//# sourceMappingURL=index.js.map