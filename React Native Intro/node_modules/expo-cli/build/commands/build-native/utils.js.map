{"version":3,"sources":["../../../src/commands/build-native/utils.ts"],"names":["makeProjectTarballAsync","tarPath","spinner","start","changes","stdout","length","fail","Error","succeed","size","fs","stat","printBuildTable","builds","headers","colWidths","refactoredBuilds","map","build","artifacts","buildUrl","buildTable","console","log","printLogsUrls","accountName","user","UserManager","ensureLoggedInAsync","buildId","logsUrl","UrlUtils","constructBuildLogsUrl","username","v2","forEach","platform","printBuildResults","buildInfo","filter","i","status"],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { ApiV2, UserManager } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport ora from 'ora';\n\nimport log from '../../log';\nimport * as UrlUtils from '../utils/url';\nimport { printTableJsonArray } from '../utils/cli-table';\nimport { BuildInfo } from './build';\n\nasync function makeProjectTarballAsync(tarPath: string) {\n  const spinner = ora('Making project tarball').start();\n  const changes = (await spawnAsync('git', ['status', '-s'])).stdout;\n  if (changes.length > 0) {\n    spinner.fail('Could not make project tarball');\n    throw new Error('Please commit all files before trying to build your project. Aborting...');\n  }\n  await spawnAsync('git', [\n    'archive',\n    '--format=tar.gz',\n    '--prefix',\n    'project/',\n    '-o',\n    tarPath,\n    'HEAD',\n  ]);\n  spinner.succeed('Project tarball created.');\n\n  const { size } = await fs.stat(tarPath);\n  return size;\n}\n\nfunction printBuildTable(builds: BuildInfo[]) {\n  const headers = ['platform', 'status', 'artifacts'];\n  const colWidths = [10, 15, 80];\n  const refactoredBuilds = builds.map(build => ({\n    ...build,\n    artifacts: build.artifacts?.buildUrl ?? 'not available',\n  }));\n  const buildTable = printTableJsonArray(headers, refactoredBuilds, colWidths);\n  console.log(buildTable);\n}\n\nasync function printLogsUrls(\n  accountName: string,\n  builds: Array<{ platform: 'android' | 'ios'; buildId: string }>\n): Promise<void> {\n  const user = await UserManager.ensureLoggedInAsync();\n  if (builds.length === 1) {\n    const { buildId } = builds[0];\n    const logsUrl = UrlUtils.constructBuildLogsUrl({\n      buildId,\n      username: accountName,\n      v2: true,\n    });\n    log(`Logs url: ${logsUrl}`);\n  } else {\n    builds.forEach(({ buildId, platform }) => {\n      const logsUrl = UrlUtils.constructBuildLogsUrl({\n        buildId,\n        username: user.username,\n        v2: true,\n      });\n      log(`Platform: ${platform}, Logs url: ${logsUrl}`);\n    });\n  }\n}\n\nasync function printBuildResults(buildInfo: Array<BuildInfo | null>): Promise<void> {\n  if (buildInfo.length === 1) {\n    log(`Artifact url: ${buildInfo[0]?.artifacts?.buildUrl ?? ''}`);\n  } else {\n    buildInfo\n      .filter(i => i?.status === 'finished')\n      .forEach(build => {\n        log(`Platform: ${build?.platform}, Artifact url: ${build?.artifacts?.buildUrl ?? ''}`);\n      });\n  }\n}\n\nexport { makeProjectTarballAsync, printBuildTable, printLogsUrls, printBuildResults };\n"],"file":"utils.js"}