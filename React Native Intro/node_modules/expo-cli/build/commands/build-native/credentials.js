"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureCredentialsAsync = ensureCredentialsAsync;

function _easJson() {
  const data = require("../../easJson");

  _easJson = function () {
    return data;
  };

  return data;
}

function _prompts() {
  const data = _interopRequireDefault(require("../../prompts"));

  _prompts = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const platformMapName = {
  ios: 'iOS',
  android: 'Android'
};

async function ensureCredentialsAutoAsync(provider, workflow) {
  const platform = platformMapName[provider.platform];

  switch (workflow) {
    case _easJson().Workflow.Managed:
      if (await provider.hasLocalAsync()) {
        return _easJson().CredentialsSource.LOCAL;
      } else {
        return _easJson().CredentialsSource.REMOTE;
      }

    case _easJson().Workflow.Generic:
      {
        const hasLocal = await provider.hasLocalAsync();
        const hasRemote = await provider.hasRemoteAsync();

        if (hasRemote && hasLocal) {
          if (!(await provider.isLocalSyncedAsync())) {
            (0, _log().default)(`Contents of your local credentials.json for ${platform} are not the same as credentials on Expo servers`);
            const {
              select
            } = await (0, _prompts().default)({
              type: 'select',
              name: 'select',
              message: 'Which credentials you want to use for this build?',
              choices: [{
                title: 'Local credentials.json',
                value: _easJson().CredentialsSource.LOCAL
              }, {
                title: 'Credentials stored on Expo servers.',
                value: _easJson().CredentialsSource.REMOTE
              }]
            });
            return select;
          } else {
            return _easJson().CredentialsSource.LOCAL;
          }
        } else if (hasLocal) {
          return _easJson().CredentialsSource.LOCAL;
        } else if (hasRemote) {
          return _easJson().CredentialsSource.REMOTE;
        } else {
          _log().default.warn(`Credentials for this app are not configured and there is no entry in credentials.json for ${platform}`);

          const {
            confirm
          } = await (0, _prompts().default)({
            type: 'confirm',
            name: 'confirm',
            message: 'Do you want to generete new credentials?'
          });

          if (confirm) {
            return _easJson().CredentialsSource.REMOTE;
          } else {
            throw new Error(`Aborting build process, credentials are not configured for ${platform}`);
          }
        }
      }
  }
}

async function ensureCredentialsAsync(provider, workflow, src) {
  switch (src) {
    case _easJson().CredentialsSource.LOCAL:
      return _easJson().CredentialsSource.LOCAL;

    case _easJson().CredentialsSource.REMOTE:
      return _easJson().CredentialsSource.REMOTE;

    case _easJson().CredentialsSource.AUTO:
      return await ensureCredentialsAutoAsync(provider, workflow);
  }
}
//# sourceMappingURL=credentials.js.map