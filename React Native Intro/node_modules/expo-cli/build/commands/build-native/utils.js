"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeProjectTarballAsync = makeProjectTarballAsync;
exports.printBuildTable = printBuildTable;
exports.printLogsUrls = printLogsUrls;
exports.printBuildResults = printBuildResults;

function _spawnAsync() {
  const data = _interopRequireDefault(require("@expo/spawn-async"));

  _spawnAsync = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function UrlUtils() {
  const data = _interopRequireWildcard(require("../utils/url"));

  UrlUtils = function () {
    return data;
  };

  return data;
}

function _cliTable() {
  const data = require("../utils/cli-table");

  _cliTable = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function makeProjectTarballAsync(tarPath) {
  const spinner = (0, _ora().default)('Making project tarball').start();
  const changes = (await (0, _spawnAsync().default)('git', ['status', '-s'])).stdout;

  if (changes.length > 0) {
    spinner.fail('Could not make project tarball');
    throw new Error('Please commit all files before trying to build your project. Aborting...');
  }

  await (0, _spawnAsync().default)('git', ['archive', '--format=tar.gz', '--prefix', 'project/', '-o', tarPath, 'HEAD']);
  spinner.succeed('Project tarball created.');
  const {
    size
  } = await _fsExtra().default.stat(tarPath);
  return size;
}

function printBuildTable(builds) {
  const headers = ['platform', 'status', 'artifacts'];
  const colWidths = [10, 15, 80];
  const refactoredBuilds = builds.map(build => {
    var _build$artifacts$buil, _build$artifacts;

    return { ...build,
      artifacts: (_build$artifacts$buil = (_build$artifacts = build.artifacts) === null || _build$artifacts === void 0 ? void 0 : _build$artifacts.buildUrl) !== null && _build$artifacts$buil !== void 0 ? _build$artifacts$buil : 'not available'
    };
  });
  const buildTable = (0, _cliTable().printTableJsonArray)(headers, refactoredBuilds, colWidths);
  console.log(buildTable);
}

async function printLogsUrls(accountName, builds) {
  const user = await _xdl().UserManager.ensureLoggedInAsync();

  if (builds.length === 1) {
    const {
      buildId
    } = builds[0];
    const logsUrl = UrlUtils().constructBuildLogsUrl({
      buildId,
      username: accountName,
      v2: true
    });
    (0, _log().default)(`Logs url: ${logsUrl}`);
  } else {
    builds.forEach(({
      buildId,
      platform
    }) => {
      const logsUrl = UrlUtils().constructBuildLogsUrl({
        buildId,
        username: user.username,
        v2: true
      });
      (0, _log().default)(`Platform: ${platform}, Logs url: ${logsUrl}`);
    });
  }
}

async function printBuildResults(buildInfo) {
  if (buildInfo.length === 1) {
    var _buildInfo$0$artifact, _buildInfo$, _buildInfo$$artifacts;

    (0, _log().default)(`Artifact url: ${(_buildInfo$0$artifact = (_buildInfo$ = buildInfo[0]) === null || _buildInfo$ === void 0 ? void 0 : (_buildInfo$$artifacts = _buildInfo$.artifacts) === null || _buildInfo$$artifacts === void 0 ? void 0 : _buildInfo$$artifacts.buildUrl) !== null && _buildInfo$0$artifact !== void 0 ? _buildInfo$0$artifact : ''}`);
  } else {
    buildInfo.filter(i => (i === null || i === void 0 ? void 0 : i.status) === 'finished').forEach(build => {
      var _build$artifacts$buil2, _build$artifacts2;

      (0, _log().default)(`Platform: ${build === null || build === void 0 ? void 0 : build.platform}, Artifact url: ${(_build$artifacts$buil2 = build === null || build === void 0 ? void 0 : (_build$artifacts2 = build.artifacts) === null || _build$artifacts2 === void 0 ? void 0 : _build$artifacts2.buildUrl) !== null && _build$artifacts$buil2 !== void 0 ? _build$artifacts$buil2 : ''}`);
    });
  }
}
//# sourceMappingURL=utils.js.map