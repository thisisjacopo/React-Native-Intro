{"version":3,"sources":["../../../src/commands/build-native/index.ts"],"names":["startBuildsAsync","ctx","projectId","platform","client","ApiV2","clientForUser","user","scheduledBuilds","includes","builder","AndroidBuilder","buildId","push","iOSBuilder","buildAction","projectDir","options","profile","Error","log","chalk","bold","easConfig","EasJsonReader","readAsync","accountName","projectName","wait","buildInfo","map","i","statusAction","program","buildCmd","command","description","allowUnknownOption","option","asyncActionProjectDir","checkConfig"],"mappings":"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","sourcesContent":["import { Platform } from '@expo/build-tools';\nimport { ApiV2 } from '@expo/xdl';\nimport { Command } from 'commander';\n\nimport { CredentialsSource, EasConfig, EasJsonReader } from '../../easJson';\nimport log from '../../log';\nimport { ensureProjectExistsAsync } from '../../projects';\nimport {\n  BuilderContext,\n  createBuilderContextAsync,\n  startBuildAsync,\n  waitForBuildEndAsync,\n} from './build';\nimport AndroidBuilder from './AndroidBuilder';\nimport iOSBuilder from './iOSBuilder';\nimport { printBuildResults, printBuildTable, printLogsUrls } from './utils';\n\ninterface Options {\n  platform: 'android' | 'ios' | 'all';\n  skipCredentialsCheck?: boolean; // TODO: noop for now\n  wait?: boolean;\n  profile: string;\n}\n\nasync function startBuildsAsync(\n  ctx: BuilderContext,\n  projectId: string,\n  platform: Options['platform']\n): Promise<Array<{ platform: 'android' | 'ios'; buildId: string }>> {\n  const client = ApiV2.clientForUser(ctx.user);\n  let scheduledBuilds: Array<{ platform: 'android' | 'ios'; buildId: string }> = [];\n  if (['android', 'all'].includes(platform)) {\n    const builder = new AndroidBuilder(ctx);\n    const buildId = await startBuildAsync(client, builder, projectId);\n    scheduledBuilds.push({ platform: 'android', buildId });\n  }\n  if (['ios', 'all'].includes(platform)) {\n    const builder = new iOSBuilder(ctx);\n    const buildId = await startBuildAsync(client, builder, projectId);\n    scheduledBuilds.push({ platform: 'ios', buildId });\n  }\n  return scheduledBuilds;\n}\n\nexport async function buildAction(projectDir: string, options: Options): Promise<void> {\n  const { platform, profile } = options;\n  if (!platform || !['android', 'ios', 'all'].includes(platform)) {\n    throw new Error(\n      `-p/--platform is required, valid platforms: ${log.chalk.bold('android')}, ${log.chalk.bold(\n        'ios'\n      )}, ${log.chalk.bold('all')}`\n    );\n  }\n  const easConfig: EasConfig = await new EasJsonReader(projectDir, platform).readAsync(profile);\n  const ctx = await createBuilderContextAsync(projectDir, easConfig);\n  const projectId = await ensureProjectExistsAsync(ctx.user, {\n    accountName: ctx.accountName,\n    projectName: ctx.projectName,\n  });\n  const scheduledBuilds = await startBuildsAsync(ctx, projectId, options.platform);\n  printLogsUrls(ctx.accountName, scheduledBuilds);\n\n  if (options.wait) {\n    const buildInfo = await waitForBuildEndAsync(\n      ctx,\n      projectId,\n      scheduledBuilds.map(i => i.buildId)\n    );\n    printBuildResults(buildInfo);\n  }\n}\n\nasync function statusAction(projectDir: string): Promise<void> {\n  throw new Error('not implemented yet');\n}\n\nexport default function (program: Command) {\n  const buildCmd = program\n    .command('build [project-dir]')\n    .description(\n      'Build an app binary for your project, signed and ready for submission to the Google Play Store.'\n    )\n    .allowUnknownOption()\n    .option('-p --platform <platform>')\n    .option('--skip-credentials-check', 'Skip checking credentials', false)\n    .option('--no-wait', 'Exit immediately after scheduling build', false)\n    .option('--profile <profile>', 'Build profile', 'release')\n    .asyncActionProjectDir(buildAction, { checkConfig: true });\n\n  program\n    .command('build:status')\n    .description(`Get the status of the latest builds for your project.`)\n    .asyncActionProjectDir(statusAction, { checkConfig: true });\n}\n"],"file":"index.js"}